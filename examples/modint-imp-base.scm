(define-without-memoization (exec jump instrs regs)
  (let loop ((instrs instrs) (regs regs))
    (if (null? instrs)
	(register-ref regs 0)
	(let ((instr (car instrs))
	      (instrs (cdr instrs)))
	  (case (car instr)
	    ((Incr)
	     (let* ((regno (cadr instr))
		    (val (register-ref regs regno)))
	       (register-set! regs regno (+ val 1))
	       (loop instrs regs)))
	    ((Decr)
	     (let* ((regno (cadr instr))
		    (val (register-ref regs regno)))
	       (register-set! regs regno (- val 1))
	       (loop instrs regs)))
	    ((Jz)
	     (let* ((regno (cadr instr))
		    (label (caddr instr))
		    (val (register-ref regs regno)))
	       (if (zero? val)
		   (jump label regs)
		   (loop instrs regs))))
	    ((Jump)
	     (let* ((label (cadr instr)))
	       (jump label regs)))
	    (else
	     (error "Illegal Instruction" instr)))))))
