(defprim-dynamic (dpy x) (begin (display x) x))
(defprim-dynamic (generalize x) x)
(define (gen x) (if #t x (generalize x)))
(define (main m1 n1 m n p1 q1 p q h j)
  (((let ((x1 (m1 n1)))
      (gen (lambda (f)
	(let ((x (m n)))
	  (gen (lambda (y) y))))))
    h)
   ((let ((a1 (p1 q1)))
      (gen (lambda (g)
	(let ((a (p q)))
	  (gen (lambda (b) b))))))
    j)))

;;;(define (displaymain h j)
;;;  (((let ((x1 (display "hello ")))
;;;      (gen (lambda (f)
;;;	(let ((x (display "world! ")))
;;;	  (gen (lambda (y) y))))))
;;;    h)
;;;   ((let ((a1 (display "hello ")))
;;;      (gen (lambda (g)
;;;	(let ((a (display " world")))
;;;	  (gen (lambda (b) b))))))
;;;    j)))

(define (dpymain h j)
  (((let ((x1 (dpy "hello ")))
      (gen (lambda (f)
	(let ((x (dpy "world! ")))
	  (gen (lambda (y) y))))))
    h)
   ((let ((a1 (dpy "hello ")))
      (gen (lambda (g)
	(let ((a (dpy "world! ")))
	  (gen (lambda (b) b))))))
    j)))
