,open big-scheme escapes
y
(load "cogen-load.scm")

(define repetitions 1)
(define (ntimes thunk n)
  (let loop ((n n))
     (if (> n 0)
         (begin (thunk) (loop (- n 1)))
         #t)))

(load "examples/direct-lr-support.scm")
(load "../lr-essence/examples/grammars.scm")
(define GRAMMAR g10-attrib)
(define K 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "----------------------------------------------------------------------") (newline)
(display "PGG (parsers) :") (newline)

(display "!!!preprocessing") (newline)
,time (ntimes (lambda() (cogen-driver '("examples/direct-lr-pgg.scm") '(direct-parse-main s s d)) #f) repetitions)
(display (list "preprocessing time x" repetitions))

(display "!!!generating compiler") (newline)
(define ppp (cogen-driver '("examples/direct-lr-pgg.scm") '(direct-parse-main s s d)))
(eval `(BEGIN ,@ppp) (interaction-environment))
,time (ntimes (lambda () (start-memo 2 '$goal '(1 1 2) (list 'GRAMMAR 'K 'INPUT))) repetitions)
(display (list "compiler generation time x" repetitions))

(display "!!!compiling") (newline)
(define level1 (start-memo 2 '$goal '(1 1 2) (list 'GRAMMAR 'K 'INPUT)))
(eval `(BEGIN ,@*residual-program*) (interaction-environment))
,time (ntimes (lambda () (start-memo 1
				     (cadr (list-ref level1 2))
				     (cadr (list-ref level1 3))
				     (list GRAMMAR K 'INPUT))) repetitions)
(display (list "compilation time x" repetitions))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
,exit
